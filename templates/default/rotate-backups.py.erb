#!/usr/bin/env python

#############################################################################################
# Default Settings                                                                          #
# Note these can also be changed in /etc/default/rotate-backups or $HOME/.rotate-backupsrc  #
#############################################################################################

DEFAULTS = {
            'backups_dir':        '/var/backups/latest/',
            'archives_dir':       '/var/backups/archives/',
            'hourly_backup_hour': 23, # 0-23
            'weekly_backup_day':  6,  # 0-6, Monday-Sunday
            'max_weekly_backups': 52,
            'backup_extensions':  ['tar.gz', '.tar.bz2', '.jar'], # list of file extensions that will be backed up
            'log_level':          'ERROR',
           }

#############################################################################################

import os, sys, time, re, csv, traceback, logging, ConfigParser, StringIO, shutil
from datetime import datetime, timedelta

allowed_log_levels = { 'INFO': logging.INFO, 'ERROR': logging.ERROR, 'WARNING': logging.WARNING, 'DEBUG': logging.DEBUG }

LOGGER = logging.getLogger('rotate-backups')
consoleHandler = logging.StreamHandler()
consoleHandler.setLevel(allowed_log_levels[DEFAULTS["log_level"]])
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
consoleHandler.setFormatter(formatter)
LOGGER.addHandler(consoleHandler)


class SimpleConfig(object):
   def __init__(self):
      self.config = ConfigParser.ConfigParser()
      global_configfile = '/etc/default/rotate-backups.<%= @database %>'
      local_configfile  = os.path.join(os.getenv("HOME"), ".rotate-backupsrc.<%= @database %>")
      self.config.read([global_configfile, local_configfile])
      log_level = self.config.get('Settings', 'log_level')
      LOGGER.setLevel(allowed_log_levels.get(log_level, DEFAULTS["log_level"]))

   def __getattr__(self, setting):
      r = None

      if setting in ('hourly_backup_hour', 'weekly_backup_day', 'max_weekly_backups'):
         r = self.config.getint('Settings', setting)
      else:
         r = self.config.get('Settings', setting)

      if setting == 'backup_extensions':
         r = self.parse_extensions(r)

      return r or DEFAULTS.get(setting)

   def parse_extensions(self, extensions_string):
      parser = csv.reader(StringIO.StringIO(extensions_string))
      return list(parser)[0]


class Account(object):
   def __init__(self, account_name):
      self.base_path = '%s/%s/' % (config.archives_dir, account_name)

   def rotate(self, period_name, next_period_name, max_age):
      earliest_creation_date = datetime.now() - max_age
      for backup in self.get_backups_in(period_name):
         if backup.date < earliest_creation_date:
            # This backup is too old, move to other backup directory or delete.
            if next_period_name and backup.is_rotation_time(period_name):
               backup.move_to(next_period_name, config.archives_dir)
            else:
               backup.remove()

   def get_backups_in(self, directory):
      backups = []
      path_to_dir = '%s%s/' % (self.base_path, directory)
      if os.path.isdir(path_to_dir):
         for filename in os.listdir(path_to_dir):
            path_to_file = os.path.join(path_to_dir, filename)
            backups.append(Backup(path_to_file))
      backups.sort()
      return backups


class Backup(object):
   def __init__(self, path_to_file):
      """Instantiation also rewrites the filename if not already done, prepending the date."""
      self.pattern = '(.*)(\-)([0-9]{4}\-[0-9]{2}\-[0-9]{2}\-[0-9]{4})'
      self.path_to_file = path_to_file
      self.filename = self.format_filename()
      self.set_account_and_date(self.filename)

   def set_account_and_date(self, filename):
      match_obj = re.match(self.pattern, filename)
      if match_obj is None:
        return filename
      self.account = match_obj.group(1)
      datestring = match_obj.group(3)
      time_struct = time.strptime(datestring, "%Y-%m-%d-%H%M")
      self.date = datetime(*time_struct[:5])

   def is_rotation_time(self, period_name):
      assert(period_name in ('hourly', 'daily', 'weekly'))

      if period_name == 'hourly':
         actual_time = self.date.hour
         config_time = config.hourly_backup_hour
      elif period_name == 'daily':
         actual_time = self.date.weekday
         config_time = config.weekly_backup_day
      else:
         return False

      if actual_time == config_time:
         LOGGER.debug('%s equals %s.' % (actual_time, config_time))
         return True
      else:
         LOGGER.debug('%s is not %s.' % (actual_time, config_time))
         return False

   def move_to(self, directory, archives_dir):
      destination_dir = os.path.join(archives_dir, self.account, directory);
      new_filepath = os.path.join(archives_dir, self.account, directory, self.filename)
      try:
          LOGGER.info('Moving %s to %s.' % (self.path_to_file, new_filepath))
          if not os.path.isdir(destination_dir):
            os.makedirs(destination_dir)
          shutil.move(self.path_to_file, new_filepath)
      except:
          LOGGER.error('Unable to move latest backups into %s/ directory.' % directory)
          LOGGER.error("Stacktrace: " + traceback.format_exc())
          sys.exit(1)

   def remove(self):
     LOGGER.info('Removing %s' % self.path_to_file)
     os.remove(self.path_to_file)

   def format_filename(self):
      """If this filename hasn't yet been prepended with the date, do that now."""
      # Does the filename include a date?
      path_parts = os.path.split(self.path_to_file)
      filename = path_parts[-1]
      parent_dir = os.sep + os.path.join(*path_parts[:-1])
      if not re.match(self.pattern, filename.split('.')[0]):
          # No date, rename the file.
          self.mtime = time.localtime( os.path.getmtime(self.path_to_file) )
          self.mtime_str = time.strftime('%Y-%m-%d-%H%M', self.mtime)
          account = filename.split('.')[0]
          extension = filename.split('.', 1)[1]
          filename = ('%s-%s.' + extension) % (account, self.mtime_str)
          new_filepath = os.path.join(parent_dir, filename)
          LOGGER.info('Renaming file to %s.' % new_filepath)
          shutil.move(self.path_to_file, new_filepath)
          self.path_to_file = new_filepath
      return filename

   def __cmp__(x, y):
      """For sorting by date."""
      return cmp( x.date, y.date)


def is_backup(filename):
   for extension in config.backup_extensions:
      if filename.endswith(extension):
          return True
   return False

def collect():
   """Return a collection of account objects for all accounts in backup directory."""
   accounts = []
   # Append all account names from archives_dir.
   for account_name in os.listdir(config.archives_dir):
      accounts.append(account_name)
   accounts = sorted(list(set(accounts))) # Uniquify.
   return map(Account, accounts)

def check_dirs():
   # Make sure backups_dir actually exists.
   if not os.path.isdir(config.backups_dir):
      LOGGER.error("Unable to find backups directory: %s." % config.backups_dir)
      sys.exit(1)

   # Make sure archives_dir actually exists.
   if not os.path.isdir(config.archives_dir):
      try:
         os.mkdir(config.archives_dir)
      except:
         LOGGER.error("Unable to create archives directory: %s." % config.archives_dir)
         sys.exit(1)

def rotate_new_arrivals():
   for filename in os.listdir(config.backups_dir):
      if is_backup(filename):
         new_arrival = Backup(os.path.join(config.backups_dir, filename))
         new_arrival.move_to(HOURLY[0], config.archives_dir)

###################################################

config = SimpleConfig()
check_dirs()

#         period_name, next_period_name, max_age):
HOURLY = ('hourly',   'daily',           timedelta(hours = 24))
DAILY  = ('daily',    'weekly',          timedelta(days = 7))
WEEKLY = ('weekly',   '',                timedelta(days = 7 * config.max_weekly_backups))


# For each account, rotate out new_arrivals, old dailies, old weeklies.
rotate_new_arrivals()

for account in collect():
    account.rotate(*HOURLY)
    account.rotate(*DAILY)
    account.rotate(*WEEKLY)

sys.exit(0)
